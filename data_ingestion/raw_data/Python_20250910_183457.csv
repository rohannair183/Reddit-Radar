id,title,selftext,subreddit,author,score,upvote_ratio,num_comments,created_utc,url,permalink,link_flair_text,is_self,over_18,spoiler,stickied,locked,distinguished,retrieved_at
1naeqh3,Sunday Daily Thread: What's everyone working on this week?,"# Weekly Thread: What's Everyone Working On This Week? üõ†Ô∏è

Hello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!

## How it Works:

1. **Show & Tell**: Share your current projects, completed works, or future ideas.
2. **Discuss**: Get feedback, find collaborators, or just chat about your project.
3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.

## Guidelines:

* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.
* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.

## Example Shares:

1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!
2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.
3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!

Let's build and grow together! Share your journey and learn from others. Happy coding! üåü",Python,AutoModerator,6,0.88,3,1757203231.0,https://www.reddit.com/r/Python/comments/1naeqh3/sunday_daily_thread_whats_everyone_working_on/,https://reddit.com/r/Python/comments/1naeqh3/sunday_daily_thread_whats_everyone_working_on/,:pythonLogo: Daily Thread,True,False,False,True,False,moderator,2025-09-10T22:28:53.131845+00:00
1nc41wf,Tuesday Daily Thread: Advanced questions,"# Weekly Wednesday Thread: Advanced Questions üêç

Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.

## How it Works:

1. **Ask Away**: Post your advanced Python questions here.
2. **Expert Insights**: Get answers from experienced developers.
3. **Resource Pool**: Share or discover tutorials, articles, and tips.

## Guidelines:

* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.
* Questions that are not advanced may be removed and redirected to the appropriate thread.

## Recommended Resources:

* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.

## Example Questions:

1. **How can you implement a custom memory allocator in Python?**
2. **What are the best practices for optimizing Cython code for heavy numerical computations?**
3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**
4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**
5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**
6. **What are some advanced use-cases for Python's decorators?**
7. **How can you achieve real-time data streaming in Python with WebSockets?**
8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**
9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**
10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**

Let's deepen our Python knowledge together. Happy coding! üåü",Python,AutoModerator,5,1.0,0,1757376029.0,https://www.reddit.com/r/Python/comments/1nc41wf/tuesday_daily_thread_advanced_questions/,https://reddit.com/r/Python/comments/1nc41wf/tuesday_daily_thread_advanced_questions/,:pythonLogo: Daily Thread,True,False,False,True,False,moderator,2025-09-10T22:28:54.136914+00:00
1ndj5vz,"I decoupled FastAPI dependency injection system in pure python, no dependencies.","**What My Project Does**

When building FastAPI endpoints, I found the dependency injection system such a pleasure to use that I wanted it everywhere, not just in my endpoints. I explored a few libraries that promised similar functionality, but each had drawbacks, some required Pydantic, others bundled in features beyond dependency injection, and many were riddled with bugs.

That's way I created [PyDepends](https://github.com/entropy-flux/PyDepends), a lightweight dependency injection system that I now use in my own projects and would like to share with you.

**Target Audience**  
This is mainly aimed at:

* FastAPI developers who want to use dependency injection in the service layer.

* Domain-Driven Design practitioners who want to decouple their services from infrastructure.

* Python developers who aren‚Äôt building API endpoints but would still like to use dependency injection in their projects.
It‚Äôs not production-grade yet, but it‚Äôs stable enough for everyday use and easy to extend.

**Comparison**  

Compared to other similar packages, it does just that, inject dependencies, is not bloated with other functionalities. 

* FastDepends: I started out with this for another library I was using but had to ditch it because of the bugs. I even opened a pull request fixing the issue, but it wasn‚Äôt taken into account. It also cannot be used with non-serializable classes, and I wanted to inject machine learning models into services. On top of that, it does unpredictable things beyond dependency injection.

Repo: [https://github.com/entropy-flux/PyDepends](https://github.com/entropy-flux/PyDepends)

Hope you find it useful!",Python,EricHermosis,40,0.88,10,1757522072.0,https://www.reddit.com/r/Python/comments/1ndj5vz/i_decoupled_fastapi_dependency_injection_system/,https://reddit.com/r/Python/comments/1ndj5vz/i_decoupled_fastapi_dependency_injection_system/,Showcase,True,False,False,False,False,,2025-09-10T22:28:55.141915+00:00
1ndnusy,"A Complete List of Python Tkinter Colors, Valid and Tested","I needed a complete list of valid color names for Python's Tkinter package as part of my [ButtonPad](https://pypi.org/project/ButtonPad/) GUI framework development. The lists I found on the internet were either incomplete, buried under ads, and often just plain wrong. Here's a list of all 760 color names (valid and personally tested) for Python Tkinter.

https://inventwithpython.com/blog/complete-list-tkinter-colors-valid-and-tested.html",Python,AlSweigart,10,0.92,0,1757532478.0,https://www.reddit.com/r/Python/comments/1ndnusy/a_complete_list_of_python_tkinter_colors_valid/,https://reddit.com/r/Python/comments/1ndnusy/a_complete_list_of_python_tkinter_colors_valid/,Resource,True,False,False,False,False,,2025-09-10T22:28:56.143040+00:00
1ndk80g,Scaling asyncio on Free-Threaded Python,"https://labs.quansight.org/blog/scaling-asyncio-on-free-threaded-python

From the author: ""In this blog post, we will explore the changes I made in the upcoming Python 3.14 release to enable asyncio to scale on the free-threaded build of CPython.""",Python,reidhoch,6,1.0,0,1757524387.0,https://www.reddit.com/r/Python/comments/1ndk80g/scaling_asyncio_on_freethreaded_python/,https://reddit.com/r/Python/comments/1ndk80g/scaling_asyncio_on_freethreaded_python/,Resource,True,False,False,False,False,,2025-09-10T22:28:57.148079+00:00
1ndm9zl,"Update: Python-based MTG Commander Deck Builder ‚Äî Now With Combos, Bracket Enforcement, and Include/","Hi r/Python, I wanted to share another update on my Python-based project: a **Magic: The Gathering Commander deck builder**. My first post here was when I had a mostly command-line tool; then I moved to a basic web interface. Since then I‚Äôve added quite a few new features, cleaned up the backend, and expanded both the web and CLI sides.

# What My Project Does

* Pick a commander and up to three themes (e.g., Aristocrats, +1/+1, Kindred, Aggro).
* The builder generates a complete 100-card list with stage-by-stage reasoning.
* Handles multi-copy strategies (Petitioners, Dragon‚Äôs Approach, Shadowborn Apostle) with packages that keep the deck at 100 and adjust land counts automatically.
* Lets you lock favorite cards, reroll just creatures/spells/lands, or swap cards for alternatives.
* Supports ‚Äúowned-only‚Äù and ‚Äúprefer owned‚Äù builds by uploading TXT/CSV lists of your collection.
* Exports to TXT (Moxfield/Archidekt), CSV with tags/Owned info, or a simple printout.

# Target Audience

* **Magic: The Gathering players** who like to theorycraft and spin up decks quickly.
* People who want to give a few high-level instructions (commander, themes, composition) and get a playable decklist back.
* Developers or hobbyists interested in Python projects that mix data handling, web UI, and CLI tooling.

# Comparison

I built this because I wasn‚Äôt finding much in the way of Python-based, ‚Äúhands-off‚Äù deck builders. Tools like EDHRec, Moxfield, and Archidekt are great, but they generally need a lot of manual input. My approach is closer to: ‚Äúgive me a commander and some themes, generate a deck, and let me iterate fast.‚Äù It also lets me compare multiple builds for the same commander or themes to see how choices shift.

# What‚Äôs New

* **Combos & Synergies:** detects curated two-card combos, surfaces them in the web UI with badges, and honors color identity.
* **Bracket Compliance:** validates decks against configurable bracket rules (like tutors/extra turns); includes inline enforcement and optional auto-fixing.
* **Include/Exclude Lists:** add must-have or must-exclude cards via text/file input; supports fuzzy matching, EDH color checks, and JSON import/export.
* **Web UI Polish:** improved New Deck modal, integrated multi-copy suggestions, cleaner alternatives panel, and mobile-friendly layouts.
* **CLI Parity:** theme selection by name, deck composition flags (`--land-count`, `--wipe-count`, etc.), and full include/exclude support with detailed console summaries.
* **Performance & Stability:** exclude filtering benchmarked under 50ms on 20k+ cards; Docker image seeds defaults automatically; fixes for land counts, exports mismatches, and mobile scaling quirks.

# Tech Stack

* **Backend:** Python 3.x with structured logging, modular orchestration, and test suite for validation and backward compatibility.
* **Web:** Flask + Jinja templates, partial caching, validation endpoints, and Playwright end-to-end tests.
* **CLI:** argparse interface with type indicators, grouped help, and full parity with web features.
* **Deployment:** Docker with multi-arch builds (x86/ARM), sample docker-compose configs.

# Try it

* Live demo: [deck-builder.wiz-ops.com](https://deck-builder.wiz-ops.com/) (setup may take a minute).
* Docker Hub (easiest): [mwisnowski/mtg-python-deckbuilder](https://hub.docker.com/r/mwisnowski/mtg-python-deckbuilder)
* Source & releases: [GitHub repo](https://github.com/mwisnowski/mtg_python_deckbuilder)

# Roadmap

* Budget mode with price caps and recommended pickup lists.
* Smarter land base profiles tuned by curve and pip breakdown.
* Random build modes (‚Äúsurprise me,‚Äù random by theme, or full random).

This is my first real ‚Äúfrom-scratch‚Äù software project, so if you have thoughts on the Python side ‚Äî code structure, testing, deployment ‚Äî I‚Äôd love to hear them.

Do you want me to keep this **balanced between MTG features and technical notes**, or make it **more developer-focused** (leaning heavier on Python design decisions, logging, testing, etc.) since it‚Äôs for r/Python?",Python,styrofoamshotgun,3,1.0,0,1757528911.0,https://www.reddit.com/r/Python/comments/1ndm9zl/update_pythonbased_mtg_commander_deck_builder_now/,https://reddit.com/r/Python/comments/1ndm9zl/update_pythonbased_mtg_commander_deck_builder_now/,Showcase,True,False,False,False,False,,2025-09-10T22:28:58.153069+00:00
1ncmlwv,Should I give away my app to my employer for free?,"I work for a fintech company in the UK (in operations to be specific) however my daily role doesn‚Äôt require any coding knowledge. I have built up some python knowledge over the past few years and have developed an app that far outperforms the workflow tool my company currently uses. I have given hints to my manager that I have some coding knowledge and given them snippets of the tool I‚Äôve created, she‚Äôs pretty much given me free reign to stop any of my usual tasks and focus on this full time. My partner used to work for the same company in the finance department so I know they paid over ¬£200k for 3 people to develop the current workflow tool (these developers had no operations experience so built something unfit for purpose). I‚Äôve estimated if I can get my app functional it would save the company ¬£20k per month (due to all the manual work we usually have to do vs what I can automate). My manager has already said this puts me in a good position for a decent bonus next year (it wouldn‚Äôt be anymore than ¬£10k) so I‚Äôm a little stuck on what to do and if I‚Äôm sounding greedy. 

Has anyone ever been in a similar position? 

EDIT TITLE: I know it‚Äôs not ‚Äòfor free‚Äô as of course I‚Äôm paid to do my job. But I would be handing over hours of work that I haven‚Äôt been paid for. ",Python,RDE_20,292,0.81,230,1757433058.0,https://www.reddit.com/r/Python/comments/1ncmlwv/should_i_give_away_my_app_to_my_employer_for_free/,https://reddit.com/r/Python/comments/1ncmlwv/should_i_give_away_my_app_to_my_employer_for_free/,Discussion,True,False,False,False,False,,2025-09-10T22:28:59.157081+00:00
1ndgpwv,Curious about moving from Mechanical Engineering to Data Science," Hey everyone,

I‚Äôm wrapping up my final year in **Mechanical Engineering**, and lately I‚Äôve been fascinated by how data is shaping decisions in engineering, manufacturing, and beyond. The more I read about **data analysis, machine learning, and predictive modeling**, the more I feel drawn to explore this path.

My background is heavy on problem-solving, math, and physics, and I‚Äôve done some basic coding in Python and MATLAB for academic projects. I‚Äôm now experimenting with SQL and data visualization tools, and I‚Äôm considering building small projects that combine engineering concepts with data insights.

I‚Äôd love to hear from people who‚Äôve made a similar shift:

* What was the most valuable skill or habit you developed early on?
* Did you start in a data-related role within your original industry, or switch fields entirely?
* Any project ideas that helped you stand out when you were starting out?

Thanks in advance for sharing your experiences!",Python,osm_22,4,1.0,8,1757516750.0,https://www.reddit.com/r/Python/comments/1ndgpwv/curious_about_moving_from_mechanical_engineering/,https://reddit.com/r/Python/comments/1ndgpwv/curious_about_moving_from_mechanical_engineering/,Discussion,True,False,False,False,False,,2025-09-10T22:29:00.162246+00:00
1nds31l,[ANNOUNCEMENT] pychub: A new way to ship your Python wheels + deps + extras,"Hey fellow deveopers!  
  
I built a packaging tool called [**pychub**](https://github.com/Steve973/pychub) that might fill a weird little gap you didn‚Äôt know you had. It came out of me needing a clean way to distribute Python wheels *with* all of their dependencies and optional extras, but *without* having to freeze them into platform-specific binaries like PyInstaller does. And if you want to just install everything into your own current environment?  That's what I wanted, too.

# So what is it?

**pychub** takes your wheel, resolves and downloads its dependencies, and wraps everything into a single executable `.chub` file. That file can then be shipped/copied anywhere, and then run directly like this:

    python yourtool.chub

It installs into the current environment (or a venv, or a conda env, your call), and can even run an entrypoint function or console script *right after* install.

No network calls. No pip. No virtualenv setup. Just `python tool.chub` and go.

# Why I built it:

Most of the Python packaging tools out there either:

* Freeze the whole thing into a binary (PyInstaller, PyOxidizer) ‚Äî which is great, until you hit platform issues or need to debug something. Or you just want to do something different than that.
* Just stop at building a wheel and leave it up to you (or your users) to figure out installation, dependencies, and environment prep.

I wanted something in between: still using the host Python interpreter (so it stays light and portable), but with everything pre-downloaded and reproducible.

# What it can bundle:

* Your main wheel
* Any number of additional wheels
* All their dependencies (downloaded and stored locally)
* Optional include files (configs, docs, whatever)
* Pre-install and post-install scripts (shell, Python, etc.)

And it‚Äôs 100% reproducible, so that the archive installs the exact same versions every time, no network access needed.

# Build tool integration:

If you're using **Poetry**, **Hatch**, or **PDM**, I‚Äôve released plugins for all three:

* Just add the plugin to your `pyproject.toml`
* Specify your build details (main wheel, includes, scripts, etc.)
* Run your normal build command and you‚Äôll get a `.chub` alongside your `.whl`

It‚Äôs one of the easiest ways to ship Python tools that *just work,* whether you're distributing internally, packaging for air-gapped environments, or dropping into Docker builder stages.

Plugins repo:  [https://github.com/Steve973/pychub-build-plugins](https://github.com/Steve973/pychub-build-plugins)

# Why not just use some other bundling/packaging tool?

Well, depending on your needs, maybe you should! I don‚Äôt think pychub replaces everything. It just solves a different problem.

If you want sealed apps with bundled runtimes, use PEX or PyOxidizer.  
If you're distributing scripts, zipapp is great.  
But if you want a **wheel-based**, network-free, single-file installer that works on any Python 3.9+ environment, then pychub might be the right tool.

Full comparison table along with everything else:  
üìò [README on GitHub](https://github.com/Steve973/pychub#why-not-just-use-insert-favorite-tool-name-here)

That‚Äôs it. I built it because I needed it to include plugins for a platform that I am building. If it helps you too, even better.  I will be actively supporting this, and if you would like to take it for a spin and see if you like it, I'd be honored to hear your feedback. If you want a feature added, etc, please let me know.  
Issues, suggestions, and PRs are all welcome.

Thanks for your time and interest!

Steve",Python,Steve91973,0,0.5,0,1757542876.0,https://www.reddit.com/r/Python/comments/1nds31l/announcement_pychub_a_new_way_to_ship_your_python/,https://reddit.com/r/Python/comments/1nds31l/announcement_pychub_a_new_way_to_ship_your_python/,News,True,False,False,False,False,,2025-09-10T22:29:01.166342+00:00
1nd1go9,I created a pretty-printed dir function to make debugging complex classes easier,"**What My Project Does**

You can check it out on github:¬†[https://pypi.org/project/pretty-dir/](https://pypi.org/project/pretty-dir/)

This library generates a better **dir** output for debugging. For a quick example, check out the [with dir](https://github.com/douglassimonsen/ppdir/raw/main/example_images/before.png) and [with ppdir](https://github.com/douglassimonsen/ppdir/raw/main/example_images/after.png) outputs using a simple pydantic model.

  
**Target Audience**

This is mainly aimed at developers who are debugging code that uses any libraries that have large, complex, deeply nested classes. Libraries such as pydantic, dataclasses, and openpyxl.

**Comparison**

It exists in a similar niche as icecream and rich.inspect where it's meant to improve the debugging experience. Unlike similar libraries, this only shows the structure, not the values themselves. This is valuable in pydantic environments, where instances can be too verbose to be meaningful when printed to the console.

**Details**

The library uses the output of the **dir(obj)** function as a baseline, but improves the output in a number of ways:

* Visually groups the methods and attributes by the classes they were defined on. Therefore, if you're subclassing the [pydantic.BaseModel](https://docs.pydantic.dev/latest/api/base_model/) class, it separates the generic basemodel methods from the subclass' specific methods.
* Pulls the first line of the docstrings for the class, all methods, and all class attributes.
* Can enable showing the function signature for all class methods
* By default, hides private and and dunder methods from the outputs
* Prints the source code location of all parent classes
* Uses [colorama](https://pypi.org/project/colorama/) to color the different sections of the output

I've set it to automatically import (see **Auto-loading in PDB (Breakpoint)** on PyPI) when I use breakpoint() and it's been a nice quality of life improvement!

This is my first project I expect other people to use, so let me know if I can improve anything!",Python,hammyhami,25,0.95,3,1757468496.0,https://www.reddit.com/r/Python/comments/1nd1go9/i_created_a_prettyprinted_dir_function_to_make/,https://reddit.com/r/Python/comments/1nd1go9/i_created_a_prettyprinted_dir_function_to_make/,Showcase,True,False,False,False,False,,2025-09-10T22:29:02.166326+00:00
1ncy8av,Most Performant Python Compilers/Transpilers in 2025,"Today I find myself in the unfortunate position to create a program that must compile arbitrary python code :(  For the use case I am facing now performance is everything, and luckily the target OS for the executable file will only be linux. The compiled codes will be standalone local computational tools without any frills (no guis, no i|o or r|w operations, no system access, and no backend or configuration needs to pull in). Python code is >=3.8 and can pull in external libraries (eg: numpy). However, the codes may be multithreaded/multiprocessed and any static type-like behavior is not guaranteed.

Historically I have used tools like pyinstaller, py2exe, py2app, which work robustly, but create stand alone executable files that are often pretty slow. I have been looking at a host of transpilers instead, eg: [https://github.com/dbohdan/compilers-targeting-c?tab=readme-ov-file](https://github.com/dbohdan/compilers-targeting-c?tab=readme-ov-file), and am somewhat overwhelmed by the amount of choices therein. Going through stackoverflow naturally recovered a lot of great recommendations that were go-to's 10-20 years ago, but do not have much promise for recent python versions. Currently I am considering:  
wax [https://github.com/LingDong-/wax](https://github.com/LingDong-/wax) ,  
11l-lang [https://11l-lang.org/transpiler/](https://11l-lang.org/transpiler/),  
nuitka [https://nuitka.net/](https://nuitka.net/),  
prometeo  [https://github.com/zanellia/prometeo](https://github.com/zanellia/prometeo),  
pytran [https://pythran.readthedocs.io/en/latest/](https://pythran.readthedocs.io/en/latest/),  
rpython [https://rpython.readthedocs.io/en/latest/](https://rpython.readthedocs.io/en/latest/),  
or py14  https://github.com/lukasmartinelli/py14.  
However, this is a lot to consider without rigorously testing all of them out. Does anyone on this sub have experience in modern Transpilers or other techniques for compiling numerical python codes for linux? If so, can you share any tools, techniques, or general guidance? Thank you!

Edit for clarification:  
This will be placed in a user facing application wherein users can upload their tools to be autonomously deployed in a on demand/dynamic runtime basis. Since we cannot know all the codes that users are uploading, a lot of the traditional and well defined methods are not possible. We are including C, C++, Rust, Fortran, Go, and Cobol compilers to support these languages, but seeking a similar solution for python.",Python,wbcm,28,0.85,31,1757459584.0,https://www.reddit.com/r/Python/comments/1ncy8av/most_performant_python_compilerstranspilers_in/,https://reddit.com/r/Python/comments/1ncy8av/most_performant_python_compilerstranspilers_in/,Discussion,True,False,False,False,False,,2025-09-10T22:29:03.171316+00:00
1ndpzmo,"I am going to suggest two ideas for python, what are your thoughts?","a new builtin function used with with that enforces type safety if type hints are present: [https://docs.google.com/document/d/1fBKrDTWUhVFrirD57Rv4i7KENE7kqXojnmq41sGJ9ug/edit?usp=sharing](https://docs.google.com/document/d/1fBKrDTWUhVFrirD57Rv4i7KENE7kqXojnmq41sGJ9ug/edit?usp=sharing)

  
a new system for defining custom operators: [https://docs.google.com/document/d/1oi5MBuZGh3JAxtCjyamiyyg76T6ficaSf6FZ\_d7RWCo/edit?usp=sharing](https://docs.google.com/document/d/1oi5MBuZGh3JAxtCjyamiyyg76T6ficaSf6FZ_d7RWCo/edit?usp=sharing)",Python,johnyeldry,0,0.38,10,1757537594.0,https://www.reddit.com/r/Python/comments/1ndpzmo/i_am_going_to_suggest_two_ideas_for_python_what/,https://reddit.com/r/Python/comments/1ndpzmo/i_am_going_to_suggest_two_ideas_for_python_what/,Discussion,True,False,False,False,False,,2025-09-10T22:29:04.171930+00:00
1ndo680,"""I wanted to learn Scripting In python"" any one want to join !!","Hi, writers if you are also looking to start programing in python for cyber security, lets do it together.   
my domain is cyber security and now day scripting and automation is highly required, so lets sync up and decide how we should plan and start.  
",Python,cyberOG01,0,0.38,3,1757533231.0,https://www.reddit.com/r/Python/comments/1ndo680/i_wanted_to_learn_scripting_in_python_any_one/,https://reddit.com/r/Python/comments/1ndo680/i_wanted_to_learn_scripting_in_python_any_one/,Tutorial,True,False,False,False,False,,2025-09-10T22:29:05.176910+00:00
1ndns22,tips for a 15 y/o starting ML,"so i got into coding last year and was learning react js and generally front end stuff but seeing how fast AI is progressing, with AGI soon, i‚Äôve deciding to dedicate my time to python, machine learning and in some time deep learning. I am 15 years old and really good at math for my age. i‚Äôve already learned the basic and some more advanced python concepts. What should i push to learn? any general tips and advice?",Python,ThatCreepyMf,0,0.24,12,1757532302.0,https://www.reddit.com/r/Python/comments/1ndns22/tips_for_a_15_yo_starting_ml/,https://reddit.com/r/Python/comments/1ndns22/tips_for_a_15_yo_starting_ml/,Discussion,True,False,False,False,False,,2025-09-10T22:29:06.181897+00:00
1ndhycj,AI-Rulez v2.0: Universal AI Assistant Configuration Management,"I'm happy to showcase AI-Rulez v2, which is a major next step in the development of this tool. 

**The Problem:** If you're using multiple AI coding assistants (Claude Code, Cursor, Windsurf, GitHub Copilot), you've probably noticed the configuration fragmentation. Each tool demands its own format - `CLAUDE.md`, `.cursorrules`, `.windsurfrules`, `.github/copilot-instructions.md`. Keeping coding standards consistent across all these tools is frustrating and error-prone.

**The Solution:** AI-Rulez lets you write your project configuration once and automatically generates native files for every AI tool - current and future ones. It's like having a build system for AI context.

## Why This Matters for Development Teams

Teams using AI assistants face common challenges:
- **Multiple tools, multiple configs**: Your team uses Claude Code for reviews, Cursor for development, Copilot for completions
- **Framework-specific standards**: Type safety, testing patterns, dependency management (uv, poetry, npm, etc.)  
- **Monorepo complexity**: Multiple services and packages all need different AI contexts
- **Team consistency**: Junior devs get different AI guidance than seniors

AI-Rulez solves this with a single `ai-rulez.yaml` that understands your project's conventions.

## Key Features

### AI-Powered Project Analysis
The `init` command is where AI-Rulez shines. Instead of manually writing configurations, let AI analyze your codebase:

```bash
# AI analyzes your codebase and generates tailored config
uvx ai-rulez init ""My Project"" --preset popular --use-agent claude --yes
```

This automatically:
- Detects your tech stack (Python/Node/Go, testing frameworks, linters)
- Identifies project patterns and conventions
- Generates appropriate coding standards and practices
- Creates specialized agents for different tasks (code review, testing, docs)
- **Automatically adds all generated AI files to .gitignore** - no more committing `.cursorrules` or `CLAUDE.md` by accident

### Universal Output Generation
One YAML config generates files for every tool:

```yaml
# ai-rulez.yaml
metadata:
  name: ""Python API Service""

presets:
  - ""popular""  # Auto-configures Claude, Cursor, Windsurf, Copilot

rules:
  - name: ""Python Type Safety""
    priority: critical
    content: |
      - Python 3.11+ with complete type annotations
      - Use | for unions: str | None not Optional[str]
      - mypy strict mode required
      - Type all function signatures and returns

  - name: ""Testing Standards""
    priority: high
    content: |
      - pytest with async support and fixtures
      - 100% coverage for new code
      - Use factory_boy for test data
      - Integration tests with real PostgreSQL

agents:
  - name: ""python-reviewer""
    description: ""Python code review specialist""
    system_prompt: ""Focus on type safety, performance, and Pythonic patterns""
```

Run `uvx ai-rulez generate` and get:
- `CLAUDE.md` for Claude Code
- `.cursorrules` for Cursor
- `.windsurfrules` for Windsurf  
- `.github/copilot-instructions.md` for GitHub Copilot
- Custom formats for any future AI tool

### Advanced Features

**MCP Server Integration**: Direct integration with Claude Code and other MCP-compatible tools:
```bash
# Start built-in MCP server with 19 configuration management tools
uvx ai-rulez mcp
```

**Comprehensive CLI**: Manage configs without editing YAML:
```bash
# Add Python-specific rules on the fly
uvx ai-rulez add rule ""FastAPI Standards"" --priority high --content ""Use Pydantic v2 models with Field validation""

# Create specialized agents
uvx ai-rulez add agent ""pytest-expert"" --description ""Testing specialist for Python projects""
```

**Team Collaboration**: 
- Remote config includes: `includes: [""https://github.com/myorg/python-standards.yaml""]`
- Local overrides: Personal customization via `.local.yaml` files
- Monorepo support: `--recursive` flag handles complex Python projects

### Enterprise Features

**Security & Compliance**:
- SSRF protection for remote config includes
- Schema validation prevents configuration errors
- Audit trails for configuration changes

**Performance**:
- Written in Go - instant startup even for large Python monorepos
- Concurrent generation for multiple output files
- Smart caching for remote configurations

## Target Audience

- **Python developers** using multiple AI coding assistants
- **Python teams** needing consistent AI behavior across projects  
- **DevOps engineers** managing AI configurations in CI/CD pipelines
- **Open source maintainers** wanting AI-ready Python project documentation
- **Enterprise teams** requiring centralized AI assistant management

## Comparison to Alternatives

### vs Manual Configuration Management
**Manual approach**: Maintain separate `.cursorrules`, `CLAUDE.md`, `.windsurfrules` files
- Problem: Configuration drift, inconsistent standards, manual syncing
- **AI-Rulez solution**: Single source generates all formats automatically

### vs Basic Tools (airules, template-ai)
**Basic tools**: Simple file copying or template systems
- **AI-Rulez advantages**: 
  - AI-powered codebase analysis and config generation
  - MCP protocol integration for live configuration management
  - Full CRUD CLI for configuration management
  - Enterprise security features and team collaboration

### vs Tool-Specific Solutions
**Tool-specific**: Each AI assistant has its own configuration system
- **AI-Rulez advantages**:
  - Future-proof: works with new AI tools without reconfiguration
  - Repository-level management for complex Python projects
  - Consistent behavior across your entire AI toolchain

## Installation & Usage

```bash
# Install via pip
pip install ai-rulez

# Or run without installing
uvx ai-rulez init ""My Python Project"" --preset popular --yes

# Generate configuration files
ai-rulez generate

# Add to your pre-commit hooks
# .pre-commit-config.yaml
repos:
  - repo: https://github.com/Goldziher/ai-rulez
    rev: v2.1.3
    hooks:
      - id: ai-rulez-validate
      - id: ai-rulez-generate
```

## Real-World Example

Here's how a Django + React monorepo benefits from AI-Rulez:

```yaml
# ai-rulez.yaml
extends: ""https://github.com/myorg/python-base.yaml""

sections:
  - name: ""Architecture""
    content: |
      - Django REST API backend with PostgreSQL
      - React TypeScript frontend
      - Celery for async tasks
      - Docker containerization

agents:
  - name: ""django-expert""
    system_prompt: ""Django specialist focusing on DRF, ORM optimization, and security""
  
  - name: ""frontend-reviewer""  
    system_prompt: ""React/TypeScript expert for component architecture and testing""

mcp_servers:
  - name: ""database-tools""
    command: ""uvx""
    args: [""mcp-server-postgres""]
    env:
      DATABASE_URL: ""postgresql://localhost/myproject""
```

This generates tailored configurations for each AI tool, ensuring consistent guidance whether you're working on Django models or React components.

## Documentation & Resources

- **Full Documentation**: [https://goldziher.github.io/ai-rulez/](https://goldziher.github.io/ai-rulez/)
- **GitHub Repository**: [https://github.com/Goldziher/ai-rulez](https://github.com/Goldziher/ai-rulez)
- **Quick Start Guide**: [https://goldziher.github.io/ai-rulez/quick-start/](https://goldziher.github.io/ai-rulez/quick-start/)

---

AI-Rulez has evolved significantly since v1.0, adding AI-powered initialization, comprehensive MCP integration, and enterprise-grade features. It's being used by teams managing large Python codebases who need consistent AI assistant behavior across their entire development workflow.

I've personally seen this solve major headaches in production Python projects where different team members were getting inconsistent AI guidance. The `init` command with AI analysis is particularly powerful for getting started quickly.

**If this sounds useful for your Python projects, please check out the [GitHub repository](https://github.com/Goldziher/ai-rulez) and consider giving it a star - it helps with visibility and keeps development motivation high!**

Would love to hear about your use cases and any feedback from the Python community.",Python,Goldziher,0,0.27,0,1757519472.0,https://www.reddit.com/r/Python/comments/1ndhycj/airulez_v20_universal_ai_assistant_configuration/,https://reddit.com/r/Python/comments/1ndhycj/airulez_v20_universal_ai_assistant_configuration/,Showcase,True,False,False,False,False,,2025-09-10T22:29:07.186861+00:00
1nckydw,Cythonize Python Code,"# Context

This is my first time messing with **Cython** (or really anything related to optimizing Python code).  
I usually just stick with yielding and avoiding keeping much in memory, so bear with me.

# Context

I‚Äôm building a Python project that‚Äôs kind of like `zipgrep` / `ugrep`.  
It streams through archive(s) file contents (nothing kept in memory) and searches for whatever pattern is passed in.

# Benchmarks

(Results vary depending on the pattern, hence the wide gap)

* ‚úÖ **\~15‚Äì30x faster** than `zipgrep` (expected)
* ‚ùå **\~2‚Äì8x slower** than `ugrep` (also expected, since it‚Äôs C++ and much faster)

I tried:

* `cythonize` from [`Cython.Build`](http://Cython.Build) with setuptools
* Nuitka

But the performance was basically identical in both cases. I didn‚Äôt see any difference at all.  
Maybe I compiled Cython/Nuitka incorrectly, even though they both built successfully?

# Question

Is it actually worth:

* Manually writing `.c` files
* Switching the right parts over to `cdef`

Or is this just one of those cases where Python‚Äôs overhead will always keep it behind something like `ugrep`?

Gitub Repo: [pyzipgrep](https://github.com/yousefabuz17/pyzipgrep)",Python,yousefabuz,20,0.95,26,1757429290.0,https://www.reddit.com/r/Python/comments/1nckydw/cythonize_python_code/,https://reddit.com/r/Python/comments/1nckydw/cythonize_python_code/,Discussion,True,False,False,False,False,,2025-09-10T22:29:08.191921+00:00
1nc7r45,Python Type System and Tooling Survey 2025,"This survey was developed with support from the Pyrefly team at Meta, the PyCharm team at JetBrains, and the typing community on discourse.python.org. No typing experience needed -- your perspective as a Python dev matters most. Take a couple minutes to help improve Python typing for all:

https://docs.google.com/forms/d/e/1FAIpQLSeOFkLutxMLqsU6GPe60OJFYVN699vqjXPtuvUoxbz108eDWQ/viewform?fbzx=-4095906651778441520",Python,AlSweigart,83,0.95,12,1757386472.0,https://www.reddit.com/r/Python/comments/1nc7r45/python_type_system_and_tooling_survey_2025/,https://reddit.com/r/Python/comments/1nc7r45/python_type_system_and_tooling_survey_2025/,Discussion,True,False,False,False,False,,2025-09-10T22:29:09.196938+00:00
1ncn5fq,imgbatch ‚Äì A Python tool for batch-processing images from the command line,"**What My Project Does**

[https://github.com/booo2233/imgbatch](https://github.com/booo2233/imgbatch)

 is a simple Python tool that lets you batch-process images (resize, compress, or convert formats) directly from the command line. Instead of opening heavy software, you can point it at a folder and quickly process all your images in one go.

**Target Audience**  
This is mainly aimed at:

* Developers who need quick image preprocessing for projects
* Photographers or designers who want to resize/compress many images at once
* Anyone who prefers lightweight CLI tools instead of GUIs

It‚Äôs not production-grade yet, but it‚Äôs stable enough for everyday use and easy to extend.

**Comparison**  
Compared to tools like ImageMagick or Pillow scripts:

* imgbatch is **simpler** (minimal commands, no need to learn a big toolset)
* It‚Äôs **focused only on batch tasks** (not a general-purpose graphics library)
* Written in Python, so easy to tweak or add custom functions if you know a little code

üëâ Repo: [https://github.com/booo2233/imgbatch](https://github.com/booo2233/imgbatch)

Would love feedback, and if you find it useful, a ‚≠ê would be amazing!  
thank you guys",Python,BrightSheepherder323,3,0.67,2,1757434260.0,https://www.reddit.com/r/Python/comments/1ncn5fq/imgbatch_a_python_tool_for_batchprocessing_images/,https://reddit.com/r/Python/comments/1ncn5fq/imgbatch_a_python_tool_for_batchprocessing_images/,Showcase,True,False,False,False,False,,2025-09-10T22:29:10.201945+00:00
1nbkych,Stop building UI frameworks in Python,"7 years back when I started coding, I used Tkinter. Then PyQt. 

I spent some good 2 weeks debating if I should learn Kivy or Java for building an Android app.

Then we've got modern ones: FastUI by Pydantic, NiceGUI (amazing project, it's the closest bet).

Python is great for a lot of things. Just stop abusing it by building (or trying to) UI with it. 

Even if you ship something you'll wake up in mid of night thinking of all the weird scenarios, convincing yourself to go back to sleep since you'll find a workaround like last time. 

Why I am saying this: Because I've tried it all. I've tried every possible way to avoid JavaScript and keep building UIs with Python.

I've contributed to some really popular UI libraries in Python, tried inventing one back in Tkinter days. 

I finally caved in and I now build UI with JavaScript, and I'm happier person now. I feel more human.",Python,PastPicture,770,0.81,294,1757330242.0,https://www.reddit.com/r/Python/comments/1nbkych/stop_building_ui_frameworks_in_python/,https://reddit.com/r/Python/comments/1nbkych/stop_building_ui_frameworks_in_python/,Discussion,True,False,False,False,False,,2025-09-10T22:29:11.206944+00:00
1nd72p7,Wondering how many of you have successfully developed and monetized an API,"Hey everyone! I‚Äôm interested and curious to know from your experiences in developing and monetizing APIs.

What niche did you choose?
What are your distribution channels?
Your top challenges?

TIA!",Python,dooditydoot,0,0.33,5,1757486801.0,https://www.reddit.com/r/Python/comments/1nd72p7/wondering_how_many_of_you_have_successfully/,https://reddit.com/r/Python/comments/1nd72p7/wondering_how_many_of_you_have_successfully/,Discussion,True,False,False,False,False,,2025-09-10T22:29:12.212007+00:00
1ncgwas,[Project] /dev/push - An open source Vercel for Python apps,"**What My Project Does**

[/dev/push](https://github.com/hunvreus/devpush) is an open source deployment platform that lets you deploy Python apps with a UX similar to Vercel/Render. It handles git-based deployments, environment variables, real-time logs, custom domains...

**Target Audience**

Python developers who want an easier way to self-host and deploy apps. It‚Äôs ready for use (I run it for my own apps) but still in beta. Bug reports and feedback is welcome.

**Comparison**

Unlike Vercel or Render, /dev/push is fully open source and self-hosted. You can install and run it on your own Debian/Ubuntu server with a single command, without relying on a third-party platform. Compared to Coolify or CapRover, it‚Äôs lighter and more focused on delivering a polished UX.

**How to get started**

You can install it on a any Debian/Ubuntu server with a single command:

    curl -fsSL https://raw.githubusercontent.com/hunvreus/devpush/main/scripts/prod/install.sh | sudo bash

More info on installation steps: [https://devpu.sh/docs/installation/#quickstart](https://devpu.sh/docs/installation/#quickstart)

**Links**

* GitHub: [https://github.com/hunvreus/devpush](https://github.com/hunvreus/devpush)
* Docs: [https://devpu.sh/docs](https://devpu.sh/docs)
* Website: [https://devpu.sh](https://devpu.sh)",Python,hunvreus,7,0.77,0,1757419116.0,https://www.reddit.com/r/Python/comments/1ncgwas/project_devpush_an_open_source_vercel_for_python/,https://reddit.com/r/Python/comments/1ncgwas/project_devpush_an_open_source_vercel_for_python/,Showcase,True,False,False,False,False,,2025-09-10T22:29:13.215540+00:00
1ncxl3i,Method overloading: in ~30 lines of code. Simple enough?,"Getting into the deeper parts of Python and thought of this simple Metaclass that allows method overloading.

    from typing import get_type_hints
    
    class OverloadingDict(dict):
    ¬† ¬† def __setitem__(self, key, value):
    ¬† ¬† ¬† ¬† if callable(value) and key in self:
    ¬† ¬† ¬† ¬† ¬† ¬† old_func = super().__getitem__(key)
    ¬† ¬† ¬† ¬† ¬† ¬† if not isinstance(old_func, Overloader):
    ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† Overloader(old_func)
    ¬† ¬† ¬† ¬† ¬† ¬† value = Overloader(value)
    
    ¬† ¬† ¬† ¬† super().__setitem__(key, value)
    
    class AllowOverload(type):
    ¬† ¬† def __prepare__(*args):
    ¬† ¬† ¬† ¬† return OverloadingDict()
    
    class Overloader:
    ¬† ¬† registry = {}
    
    ¬† ¬† def __new__(cls, func):
    ¬† ¬† ¬† ¬† hint = get_type_hints(func)
    
    ¬† ¬† ¬† ¬† # Hack to get first (and only) hint...
    ¬† ¬† ¬† ¬† for hint in get_type_hints(func).values():
    ¬† ¬† ¬† ¬† ¬† ¬† break
    ¬† ¬† ¬† ¬† 
    ¬† ¬† ¬† ¬† cls.registry[hint] = func
    ¬† ¬† ¬† ¬† return super().__new__(cls)
    ¬† ¬† 
    ¬† ¬† def __call__(self, arg):
    ¬† ¬† ¬† ¬† arg_type = type(arg)
    ¬† ¬† ¬† ¬† func = self.registry[arg_type]
    ¬† ¬† ¬† ¬† return func(self, arg)
    ¬† ¬† ¬† ¬† 
    
    class Dog(metaclass=AllowOverload):
    ¬† ¬† def bark(self, n: int):
    ¬† ¬† ¬† ¬† print(""Bark! "" * n)
    
    ¬† ¬† def bark(self, at: str):
    ¬† ¬† ¬† ¬† print(""Barking at "" + at)
    
    doge = Dog()
    
    doge.bark(2)
    doge.bark(""cat"")

    Output:
    Bark! Bark!
    Barking at cat

It obviously is only a proof of concept.  
I didn't have the patience for many args/kwargs matching. Overloader could also be quasi-sentinel (one instance per class) and work for many classes. But you get the idea.

I think fully working overloading metaclass could be done in 100-200 lines of code.  
Do you think method overloading metaclass should be added to stdlib?",Python,szymoffk,0,0.41,7,1757457969.0,https://www.reddit.com/r/Python/comments/1ncxl3i/method_overloading_in_30_lines_of_code_simple/,https://reddit.com/r/Python/comments/1ncxl3i/method_overloading_in_30_lines_of_code_simple/,Discussion,True,False,False,False,False,,2025-09-10T22:29:14.217916+00:00
1ncaaqa,trying to find old rtmidi module,"I am trying to get MIDI input working in a very old Python 2.7 game, which is based on pygame 1.9.6.  
This game requires ""rtmidi"", but I've been unable to find exactly which rtmidi it needs.

These are the API calls used by the game;

    import rtmidi
    .RtMidiOut()
    .RtMidiIn()
    .getPortCount()
    .openPort()
    .getMessage()

which rules out `rtmidi-python` and `python-rtmidi` as those use `.MidiOut`/`.MidiIn` instead of `.RtMidiOut`/`.RtMidiIn`.

I also tried every version of `rtmidi` which uses the API expected by this game, but the game crashes on startup with the error `TypeError: object of type 'NoneType' has no len()`.",Python,000wall,3,0.81,9,1757394651.0,https://www.reddit.com/r/Python/comments/1ncaaqa/trying_to_find_old_rtmidi_module/,https://reddit.com/r/Python/comments/1ncaaqa/trying_to_find_old_rtmidi_module/,Discussion,True,False,False,False,False,,2025-09-10T22:29:15.222870+00:00
1ncnz58,"Need ideas for hackathon project, Real-time collaborative coding SaaS","Our team picked ‚ÄúReal-Time Collaborative Coding SaaS‚Äù as the problem statement for an upcoming hackathon. Basically, it‚Äôs like Google Docs but for coding,  multiple devs working on the same project with live debugging and version control.

I know there are already tools like VS Code Live Share and more, but since this is the given challenge, we are looking for innovative ideas to make it stand out.

Any feature suggestions, unique use cases, or crazy ideas are welcome. Thanks!",Python,Goal-based76,0,0.36,2,1757436132.0,https://www.reddit.com/r/Python/comments/1ncnz58/need_ideas_for_hackathon_project_realtime/,https://reddit.com/r/Python/comments/1ncnz58/need_ideas_for_hackathon_project_realtime/,Discussion,True,False,False,False,False,,2025-09-10T22:29:16.227926+00:00
1nbkguo,I built a programming language interpreted in Python!,"Hey!

I'd like to share a project I've been working on: A functional programming language that I built entirely in Python.

I'm primarily a Python developer, but I wanted to understand functional programming concepts better. Instead of just reading about them, I decided to build my own FP language from scratch. It started as a tiny DSL (domain specific language) for a specific problem (which it turned out to be terrible for!), but I enjoyed the core ideas enough to expand it into a full functional language.

## What My Project Does

NumFu is a pure functional programming language interpreted in Python featuring:
- **Arbitrary precision arithmetic** using `mpmath` - no floating point issues
- **Automatic partial application** and function composition 
- **Built-in testing syntax** with readable assertions
- **Tail call optimization** for efficient recursion
- **Clean syntax** with only four types (Number, Boolean, List, String)

Here's a taste of the syntax:

```numfu
// Functions automatically partially apply
>>> {a, b, c -> a + b + c}(_, 5)
{a, c -> a+5+c}  // Even prints as readable syntax!

// Composition and pipes
let add1 = {x -> x + 1},
    double = {x -> x * 2}
in 5 |> (add1 >> double) // 12

// Built-in testing
let square = {x -> x * x} in
square(7) ---> $ == 49  // ‚úì passes
```

## Target Audience

This is **not** a production language - it's 2-5x slower than Python due to double interpretation. It's more of a learning tool for:
- Teaching functional programming concepts without complex syntax
- Sketching mathematical algorithms where precision matters more than speed
- Understanding how interpreters work

## Comparison

NumFu has much simpler syntax than traditional functional languages like Haskell or ML and no complex type system - just four basic types. It's less powerful but much more approachable. I designed it to make FP concepts accessible without getting bogged down in advanced language features. Think of it as functional programming with training wheels.

## Implementation Details

The implementation is about 3,500 lines of Python using:
- *Lark* for parsing
- *Tree-walking interpreter* - straightforward recursive evaluation  
- *mpmath* for arbitrary precision arithmetic


## Try It Out

```bash
pip install numfu-lang
numfu repl
```

## Links

I actually enjoy web design, so NumFu has a (probably overly fancy) landing page + documentation site. üòÖ

- GitHub: https://github.com/rphle/numfu  
- Website: https://rphle.github.io/numfu/
- Documentation: https://rphle.github.io/numfu/docs
- PyPI: https://pypi.org/project/numfu-lang/

I built this as a learning exercise and it's been fun to work on. Happy to answer questions about design choices or implementation details! I also really appreciate issues and pull requests!
",Python,piequals-3,74,0.88,9,1757328658.0,https://www.reddit.com/r/Python/comments/1nbkguo/i_built_a_programming_language_interpreted_in/,https://reddit.com/r/Python/comments/1nbkguo/i_built_a_programming_language_interpreted_in/,Showcase,True,False,False,False,False,,2025-09-10T22:29:17.232887+00:00
1nc7tpm,What is the best framework for working with data from remote devices and applying it to the web?,"I need to get data from IoT devices and work with them, being able to manipulate them on the web and in databases.

I was thinking about Django Rest - Framework‚Ä¶.",Python,TankBorn,4,0.7,2,1757386688.0,https://www.reddit.com/r/Python/comments/1nc7tpm/what_is_the_best_framework_for_working_with_data/,https://reddit.com/r/Python/comments/1nc7tpm/what_is_the_best_framework_for_working_with_data/,Discussion,True,False,False,False,False,,2025-09-10T22:29:18.237779+00:00
1nc0etx,"Baba is you, learning games","Anyone played it? I heard it‚Äôs based on the logic of python. üêç 
Was thinking of downloading to keep me thinking about the topic while I am in the process of learning

https://youtu.be/z3_yA4HTJfs?si=OR6gXX6xCTiarFbM

Doesn‚Äôt apply to anything in my current job field but I am learning it to eventually make a lateral job move until the opportunity presents itself

It‚Äôs available on mobile so thinking of getting it",Python,Imaginary-Medium7360,7,0.71,7,1757366822.0,https://www.reddit.com/r/Python/comments/1nc0etx/baba_is_you_learning_games/,https://reddit.com/r/Python/comments/1nc0etx/baba_is_you_learning_games/,Discussion,True,False,False,False,False,,2025-09-10T22:29:19.242858+00:00
1nbx7l6,cython for coding a game engine?,"So I have plans to write a game engine, I wanna incorporate python as the main scripting language, and write the backend in C (maybe eventually c++) could I write the whole engine in cython getting the power of c but writing it in python or just stick to writing the backend in C?    ",Python,DeWildAsh,8,0.65,20,1757359462.0,https://www.reddit.com/r/Python/comments/1nbx7l6/cython_for_coding_a_game_engine/,https://reddit.com/r/Python/comments/1nbx7l6/cython_for_coding_a_game_engine/,Discussion,True,False,False,False,False,,2025-09-10T22:29:20.246151+00:00
1ncbh1t,I built a Django job scraper that saves listings directly into Google Sheets,"Hey everyone

I was spending way too much time manually checking job boards, copying jobs into spreadsheets, and still missing good opportunities. So I built a small Django project to automate the whole process.

Here‚Äôs what it does:

* ‚úÖ Scrapes job listings from TimesJobs using **BeautifulSoup + Requests**
* ‚úÖ Saves them in a **Django SQLite database**
* ‚úÖ Pushes jobs into **Google Sheets** via API
* ‚úÖ Avoids duplicates and formats data cleanly
* ‚úÖ Runs automatically every few hours with Python‚Äôs `schedule` library

**Source code (GitHub):** [jobscraper](https://github.com/coderdigi01/jobscraper)  
**Full step-by-step tutorial (with code snippets):** [Blog Post]()

This was a fun project that taught me a lot about:

* Rate limiting (got blocked early on for too many requests)
* Handling inconsistent HTML in job listings
* Google Sheets API quotas and batching updates",Python,Funny-Ad-5060,2,0.56,6,1757399001.0,https://www.reddit.com/r/Python/comments/1ncbh1t/i_built_a_django_job_scraper_that_saves_listings/,https://reddit.com/r/Python/comments/1ncbh1t/i_built_a_django_job_scraper_that_saves_listings/,Tutorial,True,False,False,False,False,,2025-09-10T22:29:21.248461+00:00
1nblyt6,Webscraping twitter or any,So I was trying to learn webscraping. I was following a github repo project based learning. The methods were outdated so the libraries were. It was snscrape. I found the twitter's own mining api but after one try it was not working . It had rate limit. I searched for few and found playwright and selenium . I only want to learn how to get the data and convert it into datasets. Later I will continue doing analysis on them for learning purpose. Can anyone suggest me something that should follow ?,Python,Ok-Raspberry-5333,22,0.84,12,1757333338.0,https://www.reddit.com/r/Python/comments/1nblyt6/webscraping_twitter_or_any/,https://reddit.com/r/Python/comments/1nblyt6/webscraping_twitter_or_any/,Discussion,True,False,False,False,False,,2025-09-10T22:29:22.253402+00:00
1ncenpm,how to use while loop function with input function,"i would like use a while function with input function in writing lines for isbn 10- digit problem and actually i ain t got a clue about it :( 

i just tried to put the whole 10 digit inputs in the while function, but i dont think that would be a great idea so i would like to listen u guyss opinions",Python,mbeumo1170,0,0.38,3,1757411682.0,https://www.reddit.com/r/Python/comments/1ncenpm/how_to_use_while_loop_function_with_input_function/,https://reddit.com/r/Python/comments/1ncenpm/how_to_use_while_loop_function_with_input_function/,Discussion,True,False,False,False,False,,2025-09-10T22:29:23.257203+00:00
1ncdmvb,cosine=0.91 but answer is wrong. a tiny python MRE for ‚Äúsemantic ‚â† embedding‚Äù and before/after fix,"What My Project Does

WFGY Problem Map 1.0 is a reasoning-layer ‚Äúsemantic firewall‚Äù for python AI pipelines. it defines 16 reproducible failure modes and gives exact fixes without changing infra. for r/Python this post focuses on No.5 semantic ‚â† embedding and No.8 retrieval traceability. the point is to show a minimal numpy repro where cosine looks high but the answer is wrong, then apply the before/after firewall idea to make it stick.

---

Target Audience

python folks who ship RAG or search in production. users of faiss, chroma, qdrant, pgvector, or a homegrown numpy knn. if you have logs where neighbors look close but citations point to the wrong section, this is for you.

---

Comparison

most stacks fix errors after generation by adding rerankers or regex. the same failure returns later. the WFGY approach checks the semantic field before generation. if the state is unstable, loop or reset. only a stable state can emit output.

acceptance targets: ŒîS(question, context) ‚â§ 0.45, coverage ‚â• 0.70, Œª convergent. once these hold, that class of bug stays fixed.

---

Minimal Repro (numpy only)

```

import numpy as np
np.random.seed(0)
dim = 8

# clean anchors for two topics

A = np.array([1,0,0,0,0,0,0,0.], dtype=np.float32)
B = np.array([0,1,0,0,0,0,0,0.], dtype=np.float32)

# chunks: B cluster is tight, A is sloppy, which fools raw inner product

chunks = np.stack([
    A + 0.20*np.random.randn(dim),
    A + 0.22*np.random.randn(dim),
    B + 0.05*np.random.randn(dim),
    B + 0.05*np.random.randn(dim),
]).astype(np.float32)

def ip_search(q, X, k=2):
    scores = X @ q
    idx = np.argsort(-scores)[:k]
    return idx, scores[idx]

def l2norm(X):
    n = np.linalg.norm(X, axis=1, keepdims=True) + 1e-12
    return X / n

q = (A + 0.10*np.random.randn(dim)).astype(np.float32)  # should match topic A

# BEFORE: raw inner product, no normalization

top_raw, s_raw = ip_search(q, chunks, k=2)
print(""BEFORE idx:"", top_raw, ""scores:"", np.round(s_raw, 4))

# AFTER: enforce cosine by normalizing both sides

top_cos, s_cos = ip_search(q/np.linalg.norm(q), l2norm(chunks), k=2)
print(""AFTER idx:"", top_cos, ""scores:"", np.round(s_cos, 4))

```

---

on many runs the raw version ranks the tight B cluster above A even though the query is A. enforcing a cosine contract flips it back.

---

Before vs After Fix (what to ship)

1. enforce L2 normalization for both stored vectors and queries when you mean cosine.

2. add a chunk id contract that keeps page or section fields. avoid tiny fragments, normalize casing and width.

3. apply an acceptance gate before you generate. if ŒîS or coverage fail, re-retrieve or reset instead of emitting.

full map here, includes No.5 and No.8 details and the traceability checklist

WFGY Problem Map 1.0 ‚Üí 

https://github.com/onestardao/WFGY/blob/main/ProblemMap/README.md

License
MIT. no SDK. text instructions only.

What feedback I‚Äôm looking for

short csvs or snippets where cosine looks high but the answer is wrong. 10‚Äì30 rows are enough. i will run the same contract and post before/after. if you enforce normalization at ingestion or at query time, which one worked better for you",Python,onestardao,0,0.4,5,1757407681.0,https://www.reddit.com/r/Python/comments/1ncdmvb/cosine091_but_answer_is_wrong_a_tiny_python_mre/,https://reddit.com/r/Python/comments/1ncdmvb/cosine091_but_answer_is_wrong_a_tiny_python_mre/,Showcase,True,False,False,False,False,,2025-09-10T22:29:24.262199+00:00
1nc3glf,"Just LSPDock v0.1.3 (before named LSProxy) released, multi-lsp handling feature","I have news: I implemented the feature in the proxy for handling multiple LSP in the same path/project using an `--exec` argument. The details are in the README.

LSPDock allows you to connect to an LSP running inside a Docker container directly from the IDE and automatically handles the differences in paths.

Note: I renamed the project because a conflict with another project.

The link of the repo:

[https://github.com/richardhapb/lspdock](https://github.com/richardhapb/lspdock)",Python,RichardHapb,1,0.67,0,1757374476.0,https://www.reddit.com/r/Python/comments/1nc3glf/just_lspdock_v013_before_named_lsproxy_released/,https://reddit.com/r/Python/comments/1nc3glf/just_lspdock_v013_before_named_lsproxy_released/,Resource,True,False,False,False,False,,2025-09-10T22:29:25.266073+00:00
1nchgtb,Absolute Cinema (or.. programming language in this case),"Had to knowledge python (thanks filters) In class, quickly got bored of it.

Get home, try to make calculator with it.

this is fucking sick.",Python,Dry_Structure8990,0,0.21,1,1757420704.0,https://www.reddit.com/r/Python/comments/1nchgtb/absolute_cinema_or_programming_language_in_this/,https://reddit.com/r/Python/comments/1nchgtb/absolute_cinema_or_programming_language_in_this/,Discussion,True,False,False,False,False,,2025-09-10T22:29:26.271039+00:00
1nb5rhw,"lilpipe: a tiny, typed pipeline engine (not a DAG)","At work, I develop data analysis pipelines in Python for the lab teams. Oftentimes, the pipelines are a little too lightweight to justify a full DAG.¬†[lilpipe](https://github.com/andrewruba/lilpipe)¬†is my attempt at the minimum feature set to run those pipelines without extra/unnecessary infrastructure.

# What My Project Does

* Runs sequential, in-process pipelines (not a DAG/orchestrator).
* Shares a typed, Pydantic PipelineContext across steps (assignment-time validation if you want it).
* Skips work via fingerprint caching (fingerprint\_keys).
* Gives simple control signals: ctx.abort\_pass() (retry current pass) and ctx.abort\_pipeline() (stop).
* Lets you compose steps: Step(""name"", children=\[...\]).

# Target Audience

* Data scientists / lab scientists who use notebooks or small scripts and want a shared context across steps.
* Anyone maintaining ‚Äúglue‚Äù scripts that could use caching and simple retry/abort semantics.
* Bio-analytical analysis: load plate ‚Üí calibrate ‚Üí QC ‚Üí report (ie. this project's origin story).
* Data engineers with one-box batch jobs (CSV ‚Üí clean ‚Üí export) who don‚Äôt want a scheduler and metadata DB (a bit of a stretch, I know).

# Comparison

* Airflow/Dagster/Prefect: Full DAG/orchestrators with schedulers, UIs, state, lineage, retries, SLAs/backfills. lilpipe is intentionally not that. It‚Äôs for linear, in-process pipelines where that stack is overkill.
* scikit-learn Pipeline: ML-specific fit/transform/predict on estimators. lilpipe is general purpose steps with a Pydantic context.
* Other lightweight pipeline libraries: don't have the exact features that I use on a day-to-day basis. lilpipe does have those features haha.

Thanks, hoping to get feedback. I know there are many variations of this but it may fit a certain data analysis niche.

[lilpipe](https://github.com/andrewruba/lilpipe)",Python,easy_peazy,48,0.92,4,1757281352.0,https://www.reddit.com/r/Python/comments/1nb5rhw/lilpipe_a_tiny_typed_pipeline_engine_not_a_dag/,https://reddit.com/r/Python/comments/1nb5rhw/lilpipe_a_tiny_typed_pipeline_engine_not_a_dag/,Showcase,True,False,False,False,False,,2025-09-10T22:29:27.276116+00:00
1nazumb,Class type parameters that actually do something,"I was bored, so I made type parameters for python classes that are accessible within your class and contribute to behaviour . Check them out:

[https://github.com/arikheinss/ParametricTypes.py](https://github.com/arikheinss/ParametricTypes.py)

    T = TypeVar(""T"")
    
    class wrapper[T](metaclass = ParametricClass):
        ""silly wrapper class with a type restriction""
    
        def __init__(self, x: T):
            self.set(x)
    
        def set(self, v: T):
            if not isinstance(v, T):
                raise TypeError(f""wrapper of type ({T}) got value of type {type(v)}"")
            self.data = v
    
        def get(self) -> T:
            return self.data
    # =============================================
        
    w_int = wrapper[int](2)
    
    w_int.set(4)
    print(w_int.get()) # 4
    
    print(isinstance(wrapper[int], type)) # True
    
    w_int.set(""hello"") # error!! Wrong type!
    w_2 = wrapper(None) # error!! Missing type parameters!!

edit: after some discussion in the comments, I want to highlight that one central component of this mechanism is that we get different types from applying the type parameters, i.e.:

```
isinstance(w_int, wrapper) # True
isinstance(w_int, wrapper[int]) # True
isinstance(w_int, wrapper[float]) # False
type(wrapper[str]("""")) == type(wrapper[int](2)) # False
```

For the Bot, so it does not autoban me again:

* **What My Project Does** Is explained above
* **Target Audience** Toyproject - Anyone who cares
* **Comparison** The Python GenericAlias exists, but does not really integrate with the rest of the type system.",Python,Bob_Dieter,53,0.86,29,1757267509.0,https://www.reddit.com/r/Python/comments/1nazumb/class_type_parameters_that_actually_do_something/,https://reddit.com/r/Python/comments/1nazumb/class_type_parameters_that_actually_do_something/,Showcase,True,False,False,False,False,,2025-09-10T22:29:28.281069+00:00
1nb8x34,Monday Daily Thread: Project ideas!,"# Weekly Thread: Project Ideas üí°

Welcome to our weekly Project Ideas thread! Whether you're a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.

## How it Works:

1. **Suggest a Project**: Comment your project idea‚Äîbe it beginner-friendly or advanced.
2. **Build & Share**: If you complete a project, reply to the original comment, share your experience, and attach your source code.
3. **Explore**: Looking for ideas? Check out Al Sweigart's [""The Big Book of Small Python Projects""](https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242) for inspiration.

## Guidelines:

* Clearly state the difficulty level.
* Provide a brief description and, if possible, outline the tech stack.
* Feel free to link to tutorials or resources that might help.

# Example Submissions:

## Project Idea: Chatbot

**Difficulty**: Intermediate

**Tech Stack**: Python, NLP, Flask/FastAPI/Litestar 

**Description**: Create a chatbot that can answer FAQs for a website.

**Resources**: [Building a Chatbot with Python](https://www.youtube.com/watch?v=a37BL0stIuM)

# Project Idea: Weather Dashboard

**Difficulty**: Beginner

**Tech Stack**: HTML, CSS, JavaScript, API

**Description**: Build a dashboard that displays real-time weather information using a weather API.

**Resources**: [Weather API Tutorial](https://www.youtube.com/watch?v=9P5MY_2i7K8)

## Project Idea: File Organizer

**Difficulty**: Beginner

**Tech Stack**: Python, File I/O

**Description**: Create a script that organizes files in a directory into sub-folders based on file type.

**Resources**: [Automate the Boring Stuff: Organizing Files](https://automatetheboringstuff.com/2e/chapter9/)

Let's help each other grow. Happy coding! üåü",Python,AutoModerator,10,0.87,1,1757289630.0,https://www.reddit.com/r/Python/comments/1nb8x34/monday_daily_thread_project_ideas/,https://reddit.com/r/Python/comments/1nb8x34/monday_daily_thread_project_ideas/,:pythonLogo: Daily Thread,True,False,False,False,False,moderator,2025-09-10T22:29:29.281714+00:00
1nb8bdn,My Python library to create images from simple layouts,"Hey r/Python,

I'm working on an open-source library for creating images from code. The idea is to build visuals by describing them as simple layouts, instead of calculating `(x, y)` coordinates for everything.

For example, I used it to generate this fake Reddit post card:

[Resulting Image](https://i.imgur.com/JUFXMzK.png)

This whole image was created with the Python code below. It handles all the layout, font fallbacks, text wrapping, and rendering for you.

```python
from pictex import *

# --- 1. Define the small components ---
upvote_icon = Image(""upvote.png"")
downvote_icon = Image(""downvote.png"")
comment_icon = Image(""comment.png"").resize(0.7)
python_icon = Image(""python_logo.png"").size(25, 25).border_radius('50%')

flair = Text(""Showcase"").font_size(12).padding(2, 6).background_color(""#0079D3"").color(""white"").border_radius(10)

# --- 2. Build the layout by composing components ---
vote_section = Column(
    upvote_icon,
    Text(""51"").font_size(40).font_weight(700),
    downvote_icon
).horizontal_align('center').gap(5)

post_header = Row(
    python_icon,
    Text(""r/Python ‚Ä¢ Posted by u/_unknownProtocol"").font_size(14),
    flair
).gap(8).vertical_align('center')

post_title = Text(
    ""My Python library to create images from simple layouts""
).font_size(22).font_weight(700).line_height(1.2)

post_footer = Row(
    comment_icon,
    Text(""12 Comments"").font_size(14).font_weight(700),
).gap(8).vertical_align('center')

# --- 3. Assemble the final card ---
main_card = Row(
    vote_section.padding(0, 15, 0, 0),
    Column(post_header, post_title, post_footer).gap(10)
).padding(20).background_color(""white"").border_radius(10).size(width=600).box_shadows(
    Shadow(offset=(5, 5), blur_radius=10, color=""#00000033"")
)

# --- 4. Render on a canvas ---
canvas = Canvas().background_color(LinearGradient([""#F0F2F5"", ""#DAE0E6""])).padding(40)
image = canvas.render(main_card)
image.save(""reddit_card.png"")
```

---

### What My Project Does

It's a layout engine that renders to an image. You build your image by nesting components (`Row`, `Column`, `Text`, `Image`), and the library figures out all the sizing and positioning for you, using a model inspired by CSS Flexbox. You can style any element with padding, borders, backgrounds, and shadows. It also handles fonts and emojis, automatically finding fallbacks if a character isn't supported.

### Target Audience

It's for any Python dev who wants to create images from code, especially when the content is dynamic. For example:
*   Automating social media posts or quote images.
*   Generating Open Graph images for a website on the fly.
*   Creating parts of an infographic or a report.

The project is currently in Beta. It's pretty solid for most common use cases, but you might still find some rough edges.

### Comparison

*   **vs. Pillow/OpenCV:** Think of Pillow/OpenCV as a digital canvas where you have to specify the exact `(x, y)` coordinates for everything you draw. This library is more of a layout manager: you describe *how* elements should be arranged, and it does the math for you.
*   **vs. HTML/CSS-to-Image libraries:** They're powerful, but they usually require a full web browser engine (like Chrome) to work, which can be a heavy dependency. This library uses Skia directly and is a standard `pip install`.

---

I'm still working on it, and any feedback or suggestions are very welcome.

You can find more examples in the repository. Thanks for taking a look!

*   **GitHub Repo:** [https://github.com/francozanardi/pictex](https://github.com/francozanardi/pictex)
*   **PyPI Page:** [https://pypi.org/project/pictex/](https://pypi.org/project/pictex/)",Python,_unknownProtocol,5,0.74,0,1757287964.0,https://www.reddit.com/r/Python/comments/1nb8bdn/my_python_library_to_create_images_from_simple/,https://reddit.com/r/Python/comments/1nb8bdn/my_python_library_to_create_images_from_simple/,Showcase,True,False,False,False,False,,2025-09-10T22:29:30.282422+00:00
1nbugq8,Error en Visual Studio Code: Terminal lenta y problema con la base de datos al usar Flask y GitHub.,"Hola a todos,

Necesito su ayuda con un problema que estoy teniendo con mi proyecto de Python/Flask en Visual Studio Code. He intentado varias cosas, pero no he logrado resolverlo.

Antecedentes del problema

Anteriormente, utilizaba GitHub Desktop para gestionar mis repositorios. De repente, me empez√≥ a dar un error que dec√≠a que no pod√≠a encontrar el repositorio local, a pesar de que los archivos segu√≠an en mi computadora.

Mi soluci√≥n temporal fue clonar de nuevo el repositorio, y eso funcion√≥ para GitHub Desktop. Sin embargo, ahora tengo un problema en Visual Studio Code que no s√© c√≥mo solucionar.

El problema actual

Terminal excesivamente lenta: Cuando uso la terminal de Visual Studio Code para ejecutar comandos como flask db init o flask run, el proceso se vuelve muy lento. Aunque eventualmente me muestra que el proceso fue exitoso, el tiempo de espera es anormal.

No se visualiza la base de datos: A pesar de que la terminal indica que el comando flask db init se ejecut√≥ correctamente, no puedo ver la base de datos (generalmente un archivo .db) en el explorador de archivos de Visual Studio Code. Es como si el archivo no se estuviera creando o se estuviera creando en un lugar incorrecto, aunque no me lanza ning√∫n error.

Lo que he revisado

Revis√© que mi entorno virtual (venv) est√© activado correctamente.

Confirm√© que los archivos del proyecto, como app.py y config.py, est√°n bien configurados para la base de datos.

Verifiqu√© que el archivo del repositorio est√° en el mismo lugar de siempre en mi computadora.

Mis preguntas

¬øPodr√≠a este problema estar relacionado con la forma en que GitHub Desktop maneja los repositorios?

¬øHay alguna configuraci√≥n espec√≠fica en Visual Studio Code que deba revisar?

¬øC√≥mo puedo solucionar la lentitud de la terminal y asegurar que la base de datos se cree y se muestre en mi explorador de archivos?

Agradezco de antemano cualquier sugerencia o ayuda que puedan darme. ",Python,Mysterious_Crow_7827,0,0.29,2,1757353375.0,https://www.reddit.com/r/Python/comments/1nbugq8/error_en_visual_studio_code_terminal_lenta_y/,https://reddit.com/r/Python/comments/1nbugq8/error_en_visual_studio_code_terminal_lenta_y/,Discussion,True,False,False,False,False,,2025-09-10T22:29:31.282675+00:00
1nbh74t,"what are some concepts i need to know to build a mini ""FASTAPI""","ive been wanting to implement a super minimalist version of fastapi, but the codebase is a bti overwhelming. what are some concepts i need to understand and how to approach building this?

  
thanks",Python,Silver_Equivalent_58,0,0.47,19,1757316108.0,https://www.reddit.com/r/Python/comments/1nbh74t/what_are_some_concepts_i_need_to_know_to_build_a/,https://reddit.com/r/Python/comments/1nbh74t/what_are_some_concepts_i_need_to_know_to_build_a/,Discussion,True,False,False,False,False,,2025-09-10T22:29:32.282856+00:00
1nbmdj7,Aicontextator - A CLI tool to safely bundle your project's code for LLMs,"

Hi,

I'm David. I built Aicontextator to scratch my own itch. I was spending way too much time manually gathering and pasting code files into LLM web UIs. It was tedious, and I was constantly worried about accidentally pasting an API key or another secret.

Aicontextator is a simple CLI tool built with Python that automates this entire process. You run it in your project directory, and it bundles all the relevant files into a single, clean string ready for your prompt.

The GitHub repo is here: [https://github.com/ILDaviz/aicontextator](https://github.com/ILDaviz/aicontextator)

I'd love to get your feedback and suggestions!

**What My Project Does**

Aicontextator is a command-line utility designed to make it easier and safer to provide code context to Large Language Models. Its main features are:

* **Context Bundling:** It recursively finds all files in your project, respects your `.gitignore` rules, and concatenates them into a single string for easy copy-pasting.
* **Security First:** It uses the `detect-secrets` engine to scan every file *before* adding it to the context. If it finds a potential secret (like an API key or password), it warns you and excludes that line, preventing accidental leaks.
* **User-Friendly Features:** It includes an interactive mode to visually select which files to include, a token counter to stay within the LLM's context limit, and the ability to automatically split the output into multiple chunks if the context is too large.

**Target Audience**

This tool is for any developer who regularly uses LLMs (like ChatGPT, Claude, Gemini, etc.) for coding assistance, debugging, or documentation. It's particularly useful for those working on projects with a non-trivial number of files (e.g., web developers, data scientists, backend engineers) where manually providing context is impractical. It's designed as a practical utility to be integrated into a daily development workflow, not just a toy project.

**Comparison with Alternatives**

* **vs. Manual Copy-Pasting:** This is the most common method, but it's slow, error-prone (it's easy to miss a file), and risky (you might accidentally paste a file like `.env`). Aicontextator automates this, making it fast, comprehensive, and safe.
* **vs. IDE Extensions (e.g., GitHub Copilot Chat, Cursor):** These tools are powerful but tie you to a specific editor and often a specific LLM ecosystem. Aicontextator is **editor-agnostic** and **LLM-agnostic**. It generates a simple string that you can use in any web UI or API you prefer, giving you complete flexibility.
* **vs. Other Context-Aware CLI Tools:** Many alternative tools try to be full-fledged chat clients in your terminal. Aicontextator has a much simpler scope: it does one thing and does it well. It focuses solely on **preparing the context**, acting as a powerful pre-processor for any LLM interaction, without forcing you into a specific chat interface.

Cheers!",Python,ILDaviz,0,0.36,0,1757334476.0,https://www.reddit.com/r/Python/comments/1nbmdj7/aicontextator_a_cli_tool_to_safely_bundle_your/,https://reddit.com/r/Python/comments/1nbmdj7/aicontextator_a_cli_tool_to_safely_bundle_your/,Showcase,True,False,False,False,False,,2025-09-10T22:29:33.287893+00:00
1nbnqh7,Questions for interview on OOPs concept.,"I have python interview scheduled this week.

OOPs concept will be asked in depth, What questions can be asked or expected from OOPs concept in python given that there will be in depth grilling on OOPs.

Need this job badly already in huge debt.",Python,DataScience123888,0,0.33,7,1757338060.0,https://www.reddit.com/r/Python/comments/1nbnqh7/questions_for_interview_on_oops_concept/,https://reddit.com/r/Python/comments/1nbnqh7/questions_for_interview_on_oops_concept/,Tutorial,True,False,False,False,False,,2025-09-10T22:29:34.292807+00:00
1nakbd6,Python-JSON-Logger v4.0.0.rc1 Released,"Hi All, maintainer of [python-json-logger](https://github.com/nhairs/python-json-logger) here with a new (pre) release for you.

It can be installed using `python-json-logger==4.0.0.rc1`

# What's new?

This release has a few quality of life improvements that also happen to be breaking changes. The [full change log is here](https://nhairs.github.io/python-json-logger/4.0.0/changelog/) but to give an overview:

**Support for** `ext://` **when using** `dictConfig` **/** `fileConfig`

This allows you to reference Python objects in your config for example:

    version: 1
    disable_existing_loggers: False
    formatters:
      default:
        ""()"": pythonjsonlogger.json.JsonFormatter
        format: ""%(asctime)s %(levelname)s %(name)s %(module)s %(funcName)s %(lineno)s %(message)s""
        json_default: ext://logging_config.my_json_default
        rename_fields:
          ""asctime"": ""timestamp""
          ""levelname"": ""status""
        static_fields:
          ""service"": ext://logging_config.PROJECT_NAME
          ""env"": ext://logging_config.ENVIRONMENT
          ""version"": ext://logging_config.PROJECT_VERSION
          ""app_log"": ""true""
    handlers:
      default:
        formatter: default
        class: logging.StreamHandler
        stream: ext://sys.stderr
      access:
        formatter: default
        class: logging.StreamHandler
        stream: ext://sys.stdout
    loggers:
      uvicorn.error:
        level: INFO
        handlers:
          - default
        propagate: no
      uvicorn.access:
        level: INFO
        handlers:
          - access
        propagate: no

**Support for easier to use formats**

We now support a comma `style="",""` style which lets use a comma seperate string to specific fields.

    formatter = JsonFormatter(""message,asctime,exc_info"", style="","")

We also using any sequence of strings (e.g. lists or tuples).

    formatter = JsonFormatter([""message"", ""asctime"", ""exc_info""])

# What is Python JSON Logger

If you've not heard of this package, Python JSON Logger enables you produce JSON logs when using Python's¬†`logging`¬†package.

JSON logs are machine readable allowing for much easier parsing and ingestion into log aggregation tools.

For example here is the (formatted) log output of one of my programs:

    {
      ""trace_id"": ""af922f04redacted"",
      ""request_id"": ""cb1499redacted"",
      ""parent_request_id"": null,
      ""message"": ""Successfully imported redacted"",
      ""levelname"": ""INFO"",
      ""name"": ""redacted"",
      ""pathname"": ""/code/src/product_data/consumers/games.py"",
      ""lineno"": 41,
      ""timestamp"": ""2025-09-06T08:00:48.485770+00:00""
    }

# Why post to Reddit?

Although Python JSON Logger [is in the top 300 downloaded packaged from PyPI](https://hugovk.github.io/top-pypi-packages/) (in the last month it's been downloaded more times that UV! ... just), there's not many people watching the repository [after it changed hands](https://www.reddit.com/r/Python/comments/1hcm2rr/pythonjsonlogger_has_changed_hands/) at the end of 2024.

This seemed the most appropriate way to share the word in order to minimise disruptions once it is released.",Python,nicholashairs,63,0.91,2,1757220532.0,https://www.reddit.com/r/Python/comments/1nakbd6/pythonjsonlogger_v400rc1_released/,https://reddit.com/r/Python/comments/1nakbd6/pythonjsonlogger_v400rc1_released/,News,True,False,False,False,False,,2025-09-10T22:29:35.297766+00:00
1nbtpoo,"Which 1 language to master for Al & Web in 2025?""","If you had to choose only one programming language to master for Al and web development in 2025, which one would it be and why?",Python,suraj_chandola,0,0.19,10,1757351745.0,https://www.reddit.com/r/Python/comments/1nbtpoo/which_1_language_to_master_for_al_web_in_2025/,https://reddit.com/r/Python/comments/1nbtpoo/which_1_language_to_master_for_al_web_in_2025/,Discussion,True,False,False,False,False,,2025-09-10T22:29:36.302835+00:00
1nag19u,ensures: simple Design by Contract,"* **What My Project Does**

There are a few other packages for this, but I decided to make one that is simple, readable, accepts arbitrary functions, and uses the Result type from functional programming. You can find more details in the readme: [https://github.com/brunodantas/ensures](https://github.com/brunodantas/ensures)

>ensures is a simple Python package that implements the idea of Design by Contract described in the Pragmatic Paranoia chapter of The Pragmatic Programmer. That's the chapter where they say you should trust nobody, not even yourself.

* **Target Audience**¬†(e.g., Is it meant for production, just a toy project, etc.)

Anyone interested in ~~paranoia~~ decorating functions with precondition functions etc and use a Functional data structure in the process.

I plan to add pytest tests to make this more production-ready. Any feedback is welcome.

* **Comparison**¬†(A brief comparison explaining how it differs from existing alternatives.)

None of the alternatives I found seem to implement arbitrary functions plus the Result type, while being simple and readable.

But some of the alternatives are icontract, contracts, deal. Each with varying levels of the above.",Python,poopatroopa3,26,0.85,4,1757206967.0,https://www.reddit.com/r/Python/comments/1nag19u/ensures_simple_design_by_contract/,https://reddit.com/r/Python/comments/1nag19u/ensures_simple_design_by_contract/,Showcase,True,False,False,False,False,,2025-09-10T22:29:37.306637+00:00
1na9od6,Built a free VS Code extension for Python dependencies - no more PyPI tab switching,"Tired of switching to PyPI tabs to check package versions?

Just released **Tombo** \- brings PyPI directly into VS Code:

**What it does (complements your existing workflow):**

* uv/poetry handle installation ‚Üí Tombo handles version selection
* Hover `requests` ‚Üí see ALL versions + Python compatibility
* Type `numpy>=` ‚Üí intelligent version suggestions for your project
* Perfect for big projects (10+ deps) - no more version hunting
* Then let uv/poetry create the lock files

**Demo in 10 seconds:**

1. Open any Python project
2. Type `django>=`
3. Get instant version suggestions
4. Hover packages for release info

**Installation:** VS Code ‚Üí Search ""Tombo"" ‚Üí Install

**Free & open source** \- no tracking, no accounts, just works.

‚≠ê **Star the project** if you find it useful: [https://github.com/benbenbang/tombo](https://github.com/benbenbang/tombo)

VS Code Marketplace: [https://marketplace.visualstudio.com/items?itemName=benbenbang.tombo](https://marketplace.visualstudio.com/items?itemName=benbenbang.tombo)

Documentation: [https://benbenbang.github.io/tombo/](https://benbenbang.github.io/tombo/)

Anyone else tired of manual PyPI lookups? ü§¶‚Äç‚ôÇÔ∏è",Python,benbenbang,36,0.84,18,1757189897.0,https://www.reddit.com/r/Python/comments/1na9od6/built_a_free_vs_code_extension_for_python/,https://reddit.com/r/Python/comments/1na9od6/built_a_free_vs_code_extension_for_python/,News,True,False,False,False,False,,2025-09-10T22:29:38.311649+00:00
1na61l2,"Ducky, my open-source networking & security toolkit for Network Engineers, Sysadmins, and Pentester","Hey everyone, For a long time, I've been frustrated with having to switch between a dozen different apps for my networking tasks PuTTY for SSH, a separate port scanner, a subnet calculator, etc.

To solve this, I built¬†**Ducky**, a free and open-source, all-in-one toolkit that combines these essential tools into one clean, tabbed interface.

**What it does:**

* **Multi-Protocol Tabbed Terminal:**¬†Full support for SSH, Telnet, and Serial (COM) connections.
* **Network Discovery:**¬†An ARP scanner to find live hosts on your local network and a visual Topology Mapper.
* **Essential Tools:**¬†It also includes a Port Scanner, CVE Vulnerability Lookup, Hash Cracker, and other handy utilities.

**Target Audience:**  
I built this for anyone who works with networks or systems, including:

* **Network Engineers & Sysadmins:**¬†For managing routers, switches, and servers without juggling multiple windows.
* **Cybersecurity Professionals & Students:**¬†A great all-in-one tool for pentesting, vulnerability checks (CVE), and learning.
* **Homelabbers & Tech Enthusiasts:**¬†The perfect command center for managing your home lab setup.
* **Fellow Python Developers:**¬†To see a practical desktop application built with¬†**PySide6**.

**How you can help:**  
The project is 100% open-source, and I'm actively looking for contributors and feedback!

* **Report bugs or issues:**¬†Find something that doesn't work right? Please open an issue on GitHub.
* **Suggest enhancements:**¬†Have an idea for a new tool or an improvement? Let's discuss it!
* **Contribute code:**¬†Pull Requests are always welcome.
* **GitHub Repo (Source Code & Issues):**¬†[https://github.com/thecmdguy/Ducky](https://github.com/thecmdguy/Ducky)
* **Project Homepage:**¬†[https://ducky.ge/](https://ducky.ge/)

Thanks for taking a look!",Python,initCMD,57,0.93,10,1757181199.0,https://www.reddit.com/r/Python/comments/1na61l2/ducky_my_opensource_networking_security_toolkit/,https://reddit.com/r/Python/comments/1na61l2/ducky_my_opensource_networking_security_toolkit/,Showcase,True,False,False,False,False,,2025-09-10T22:29:39.316588+00:00
1n9ov57,Simple Python expression that does complex things?,"First time I saw `a[::-1]` to invert the list `a`, I was blown away. 

`a, b = b, a` which swaps two variables (without temp variables in between) is also quite elegant. 

  
What's your favorite example?",Python,Educational-Comb4728,278,0.94,114,1757128062.0,https://www.reddit.com/r/Python/comments/1n9ov57/simple_python_expression_that_does_complex_things/,https://reddit.com/r/Python/comments/1n9ov57/simple_python_expression_that_does_complex_things/,Discussion,True,False,False,False,False,,2025-09-10T22:29:40.320753+00:00
1nb05ab,Prompt components - a better library for managing LLM prompts,"I started an Agentic AI company that has recently winded down, and we're happy to open source this library for managing prompts for LLMs!


### What My Project Does

Create components (blocks of text) that can be composed and shared across different prompts. This library enables isolated testing of each component, with support for standard python string formatting and jinja2.

The library came about because we were pulling our hair out trying to re-use different prompts across our codebase.

### Target Audience

This library is for you if you:

\- have written templates for LLMs and want proper type hint support

\- want a clean way to share blocks of text between prompts

### Comparison

Standard template engines lack clear ways to organize shared text between different prompts.

This library utilizes dataclasses to write prompts.

### Dataclasses for composable components

    @dataclass_component
    class InstructionsXml:
        _template = ""<instructions> {text} </instructions>""
        text: str
    
    @dataclass_component
    class Prompt(StringTemplate):
        _template = """"""
        ## AI Role
        {ai_role}
    
        ## Instructions
        {instructions}
        """"""
    
        ai_role: str
        instructions: Instructions
    
    prompt = Prompt(
        ai_role=""You are an expert coder."",
        instructions=Instructions(
           text=""Write python code to satisfy the user's query.""
        )
    )
    print(prompt.render()) # Renders the prompt as a string

The \`InstructionsXml\` component can be used in other prompts and also is easily swapped out! More powerful constructs are possible using dataclass features + jinja2.

Library here:¬†[https://github.com/jamesaud/prompt-components](https://github.com/jamesaud/prompt-components)",Python,swiss_shepherd,0,0.35,7,1757268164.0,https://www.reddit.com/r/Python/comments/1nb05ab/prompt_components_a_better_library_for_managing/,https://reddit.com/r/Python/comments/1nb05ab/prompt_components_a_better_library_for_managing/,Showcase,True,False,False,False,False,,2025-09-10T22:29:41.325709+00:00
1naeauz,Another free Python 3 Tkinter Book,"If you are interested, you can click the top link on my landing page and download my eBook, ""Tkinter in Python 3, De-mystified"" for free:¬†[https://linktr.ee/chris4sawit](https://linktr.ee/chris4sawit)

I recently gave away a Beginner's Python Book and that went really well

So I hope this 150 page pdf will be useful for someone interested in Tkinter in Python. Since it is sometimes difficult to copy/paste from a pdf, I've added a .docx and .md version as well.  The link will download all 3 as a zip file.  No donations will be requested. Only info needed is an email address to get the download link.",Python,caudor,4,0.58,2,1757202002.0,https://www.reddit.com/r/Python/comments/1naeauz/another_free_python_3_tkinter_book/,https://reddit.com/r/Python/comments/1naeauz/another_free_python_3_tkinter_book/,Resource,True,False,False,False,False,,2025-09-10T22:29:42.330732+00:00
