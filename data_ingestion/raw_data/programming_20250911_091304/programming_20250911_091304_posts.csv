id,title,selftext,subreddit,author,score,upvote_ratio,num_comments,created_utc,url,permalink,link_flair_text,is_self,over_18,spoiler,stickied,locked,distinguished,retrieved_at,comments_collected,top_comment_score,avg_comment_score
1ndpzfz,"Microsoft Goes Back to BASIC, Open-Sources Bill Gates' Code",,programming,Top-Figure7252,522,0.91,96,1757537582.0,https://gizmodo.com/microsoft-goes-back-to-basic-open-sources-bill-gates-code-2000654010,https://reddit.com/r/programming/comments/1ndpzfz/microsoft_goes_back_to_basic_opensources_bill/,,False,False,False,False,False,,2025-09-11T13:12:13.433947+00:00,30,271.0,37.63333333333333
1ne4hb2,Eclipse 4.37 Released,,programming,BlueGoliath,12,0.74,10,1757583833.0,https://eclipse.dev/eclipse/markdown/?f=news/4.37/index.md,https://reddit.com/r/programming/comments/1ne4hb2/eclipse_437_released/,,False,False,False,False,False,,2025-09-11T13:12:15.943658+00:00,5,24.0,7.8
1ndemk4,Performance Improvements in .NET 10,,programming,ben_a_adams,307,0.92,112,1757511908.0,https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-10/,https://reddit.com/r/programming/comments/1ndemk4/performance_improvements_in_net_10/,,False,False,False,False,False,,2025-09-11T13:12:18.452667+00:00,30,112.0,26.933333333333334
1ne6jtd,Hashed sorting is typically faster than hash tables1,,programming,JadeLuxe,5,1.0,1,1757590967.0,https://reiner.org/hashed-sorting,https://reddit.com/r/programming/comments/1ne6jtd/hashed_sorting_is_typically_faster_than_hash/,,False,False,False,False,False,,2025-09-11T13:12:20.958085+00:00,1,2.0,2.0
1ndjw6y,Many Hard Leetcode Problems are Easy Constraint Problems,,programming,avinassh,76,0.84,20,1757523670.0,https://buttondown.com/hillelwayne/archive/many-hard-leetcode-problems-are-easy-constraint/,https://reddit.com/r/programming/comments/1ndjw6y/many_hard_leetcode_problems_are_easy_constraint/,,False,False,False,False,False,,2025-09-11T13:12:23.468063+00:00,7,82.0,25.428571428571427
1ne3qww,Cross-platform gRPC Test tool,"Some interesting technical info

# C# + AvaloniaUI for the UI

* Rider has the best support developing AvaloniaUI applications.  Using CompiledBindings, it is easy to navigate between the views and viewmodels. It is really convenient to just put your cursor on a binding, hit F12 (Go to Definition) and it automatically navigates to the corresponding viewmodel class/property
* There's a plugin for a Live Preview editor but I barely used it. I prefer to just type out the xaml markup.
* I think hot-reload will be a lot more useful
* AvaloniaUI is basically WPF++. It just works(TM). Having a single code base for windows, macos and linux is huge time saver.

# F# for the backend logic

* F# is love.  Sadly, Microsoft will always prioritize C#.
* In my opinion, F# code ""looks clean"". C# code on the other hand has a lot visual noise - lots of mostly empty lines containing just an an opening `}` or closing curly brace `}`.
* F# kind of nudges you to write small, focused functions. It is easy to keep the logic in your head. This is really useful when you need to come back to some code that you wrote several months ago.  It is quicker to pick up again compared to C# where you will need to understand the whole class
* The difference in the naming convention is kind of annoying.  C# is Pascal cased while F# is using camelCase. Eventually got used to the mixed naming conventions but it was distracting in the beginning.
* F# now supports `task { }` expressions and that removed the friction with C# which uses `Tasks`. Previously, F# only had `async { }` so you had to convert back and forth to Tasks.  There was also a slight performance hit due to back and forth conversion

# Other thoughts

* I tried implementing Vertical Slice Architecture a.k.a Feature Folders together with MVVM.  I think I may have messed this up.  I've used Feature Folders on REST APIs and that works really well.  The resulting code is much more organized, easy to navigate and understand. I wanted to have the same thing on a desktop app, hence the attempt. If anyone knows of a desktop project that is vertically sliced, let me know.
* I'm developing on an M4 macmini (base model) with 32GB unified memory.  This little thing is awesome.  Builds are really fast. I usually have these apps open but the macmini still runs like pro. The fan never kicks in.
   1. Two instances of Jetbrains Rider with Jetbrains AI connected to LM Studio.
   2. LM Studio running `Qwen3 30B A3B Instruct 2507`
   3. VMWare Fusion Pro running Windows 11
   4. Claude Desktop (for the questions that my local LLM cannot handle)
   5. Firefox

[Screenshots](https://github.com/namigop/FintX/tree/main/docs)",programming,namigop,3,0.8,0,1757580927.0,https://github.com/namigop/FintX/releases/tag/rel-v3.0,https://reddit.com/r/programming/comments/1ne3qww/crossplatform_grpc_test_tool/,,False,False,False,False,False,,2025-09-11T13:12:25.974789+00:00,0,,
1nd7bby,The unreasonable effectiveness of modern sort algorithms,,programming,Voultapher,283,0.92,37,1757487695.0,https://github.com/Voultapher/sort-research-rs/blob/main/writeup/unreasonable/text.md,https://reddit.com/r/programming/comments/1nd7bby/the_unreasonable_effectiveness_of_modern_sort/,,False,False,False,False,False,,2025-09-11T13:12:28.480988+00:00,18,182.0,34.05555555555556
1ne48oh,API Live Sync #7: import-export,"In our [previous posts](https://creative-labs.hashnode.dev/hoppscotch-api-live-sync?source=more_series_bottom_blogs), we laid the foundation for live API synchronization with sync engines, [setup wizards, and real-time status indicators](https://creative-labs.hashnode.dev/api-live-sync-6-sync-engine?source=more_series_bottom_blogs). In the end, we had a working system that could detect changes and update collections automatically.

But real-world development is messier than our initial implementation assumed. Teams work together, frameworks have…uhm…peculiarities, and developers need to know what's happening when things change. Today, we're diving into the advanced features that transform our live sync system from ""functional"" to ""usable.""",programming,evilhighlord,2,0.75,0,1757582874.0,https://creative-labs.hashnode.dev/api-live-sync-7-import-export,https://reddit.com/r/programming/comments/1ne48oh/api_live_sync_7_importexport/,,False,False,False,False,False,,2025-09-11T13:12:30.988357+00:00,0,,
1ne8g85,I don't know how to interact with this community,"I am new to coding. So, everytime I get excited about something, I feel like sharing it publicly. I don't remember the last time I received constructive criticism from this community. I used to get it a year back, but now, somehow it's only hatred.

I want to learn what should I change. I have tried asking people, but it only brings more hate. I don't know what to change.

P.S - I wanted to share a screenshot of the comments only, but I am unable to add an image here.",programming,ExcitingThought2794,1,1.0,0,1757596313.0,https://www.reddit.com/r/programming/comments/1nddp6e/we_messed_up_our_query_builder_for_years_heres/,https://reddit.com/r/programming/comments/1ne8g85/i_dont_know_how_to_interact_with_this_community/,,False,False,False,False,False,,2025-09-11T13:12:33.496356+00:00,0,,
1ndt956,CXL 3.0: Redefining Zero-Copy Memory for In-Memory Databases,"How CXL 3.0 replaces DMA-based zero copy with cache-coherent memory pooling for in-memory databases, featuring an experimental Redis fork that maps remote DRAM under 200 ns.",programming,mqian41,5,0.86,0,1757545965.0,https://codemia.io/blog/path/CXL-30-Redefining-Zero-Copy-Memory-for-In-Memory-Databases,https://reddit.com/r/programming/comments/1ndt956/cxl_30_redefining_zerocopy_memory_for_inmemory/,,False,False,False,False,False,,2025-09-11T13:12:36.001271+00:00,0,,
